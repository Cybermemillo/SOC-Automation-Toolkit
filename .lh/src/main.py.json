{
    "sourceFile": "src/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1756831292830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756831300884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n         choice = input(\"Elija una opción: \")\r\n \r\n         if choice == \"1\":\r\n             print(\"Opción 1 seleccionada: Ingestar logs\")\r\n-            # Llamar función parser\r\n         elif choice == \"2\":\r\n             print(\"Opción 2 seleccionada: Detectar patrones\")\r\n         elif choice == \"3\":\r\n             print(\"Opción 3 seleccionada: Verificar IOCs\")\r\n"
                },
                {
                    "date": 1756911061828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,25 @@\n-def main_menu():\r\n+# src/main.py\r\n+import parser\r\n+\r\n+def main():\r\n     while True:\r\n-        print(\"\\nSOC Automation Toolkit\")\r\n-        print(\"=====================\")\r\n-        print(\"1) Ingestar logs\")\r\n-        print(\"2) Detectar patrones sospechosos\")\r\n-        print(\"3) Verificar IOCs\")\r\n-        print(\"4) Generar reportes\")\r\n-        print(\"5) Ejecutar respuesta automática\")\r\n-        print(\"0) Salir\")\r\n-        choice = input(\"Elija una opción: \")\r\n-\r\n+        print(\"\\n--- SOC Automation Toolkit ---\")\r\n+        print(\"1. Ingestar logs (JSON/CSV)\")\r\n+        print(\"2. Revisar IOCs\")\r\n+        print(\"3. Detectar eventos\")\r\n+        print(\"4. Generar reporte\")\r\n+        print(\"5. Simular respuesta\")\r\n+        print(\"0. Salir\")\r\n+        \r\n+        choice = input(\"Selecciona una opción: \")\r\n+        \r\n         if choice == \"1\":\r\n-            print(\"Opción 1 seleccionada: Ingestar logs\")\r\n-        elif choice == \"2\":\r\n-            print(\"Opción 2 seleccionada: Detectar patrones\")\r\n-        elif choice == \"3\":\r\n-            print(\"Opción 3 seleccionada: Verificar IOCs\")\r\n-        elif choice == \"4\":\r\n-            print(\"Opción 4 seleccionada: Generar reportes\")\r\n-        elif choice == \"5\":\r\n-            print(\"Opción 5 seleccionada: Ejecutar respuesta\")\r\n+            parser.load_logs()\r\n         elif choice == \"0\":\r\n             print(\"Saliendo...\")\r\n             break\r\n         else:\r\n-            print(\"Opción no válida, intente de nuevo.\")\r\n+            print(\"Opción aún no implementada.\")\r\n \r\n if __name__ == \"__main__\":\r\n-    main_menu()\r\n+    main()\r\n"
                },
                {
                    "date": 1756911318780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,23 +3,29 @@\n \r\n def main():\r\n     while True:\r\n         print(\"\\n--- SOC Automation Toolkit ---\")\r\n-        print(\"1. Ingestar logs (JSON/CSV)\")\r\n-        print(\"2. Revisar IOCs\")\r\n-        print(\"3. Detectar eventos\")\r\n-        print(\"4. Generar reporte\")\r\n-        print(\"5. Simular respuesta\")\r\n+        print(\"1. Ingestar logs Wazuh JSON\")\r\n+        print(\"2. Ingestar logs Syslog LOG\")\r\n         print(\"0. Salir\")\r\n         \r\n         choice = input(\"Selecciona una opción: \")\r\n         \r\n         if choice == \"1\":\r\n-            parser.load_logs()\r\n+            path = input(\"Ruta absoluta del archivo Wazuh JSON: \")\r\n+            events = parser.load_wazuh_json(path)\r\n+            print(f\"Total eventos cargados: {len(events)}\")\r\n+        \r\n+        elif choice == \"2\":\r\n+            path = input(\"Ruta absoluta del archivo Syslog LOG: \")\r\n+            events = parser.load_syslog(path)\r\n+            print(f\"Total eventos cargados: {len(events)}\")\r\n+        \r\n         elif choice == \"0\":\r\n             print(\"Saliendo...\")\r\n             break\r\n+        \r\n         else:\r\n-            print(\"Opción aún no implementada.\")\r\n+            print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n     main()\r\n"
                },
                {
                    "date": 1756911511488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,42 @@\n-# src/main.py\r\n-import parser\r\n+import os\r\n+import shutil\r\n+import tempfile\r\n \r\n-def main():\r\n+def guardar_en_temporal(ruta_archivo):\r\n+    if not os.path.isfile(ruta_archivo):\r\n+        print(\"❌ Error: la ruta no existe o no es un archivo.\")\r\n+        return None\r\n+\r\n+    nombre_archivo = os.path.basename(ruta_archivo)\r\n+    ruta_temporal = os.path.join(tempfile.gettempdir(), nombre_archivo)\r\n+\r\n+    shutil.copy2(ruta_archivo, ruta_temporal)\r\n+    print(f\"✔ Log copiado a carpeta temporal: {ruta_temporal}\")\r\n+    return ruta_temporal\r\n+\r\n+def menu_principal():\r\n     while True:\r\n-        print(\"\\n--- SOC Automation Toolkit ---\")\r\n-        print(\"1. Ingestar logs Wazuh JSON\")\r\n-        print(\"2. Ingestar logs Syslog LOG\")\r\n-        print(\"0. Salir\")\r\n-        \r\n-        choice = input(\"Selecciona una opción: \")\r\n-        \r\n-        if choice == \"1\":\r\n-            path = input(\"Ruta absoluta del archivo Wazuh JSON: \")\r\n-            events = parser.load_wazuh_json(path)\r\n-            print(f\"Total eventos cargados: {len(events)}\")\r\n-        \r\n-        elif choice == \"2\":\r\n-            path = input(\"Ruta absoluta del archivo Syslog LOG: \")\r\n-            events = parser.load_syslog(path)\r\n-            print(f\"Total eventos cargados: {len(events)}\")\r\n-        \r\n-        elif choice == \"0\":\r\n+        print(\"\\n=== SOC Automation Toolkit ===\")\r\n+        print(\"1. Ingestar log CSV\")\r\n+        print(\"2. Ingestar log JSON\")\r\n+        print(\"3. Ingestar log SYSLOG (.log)\")\r\n+        print(\"4. Salir\")\r\n+\r\n+        opcion = input(\"Seleccione una opción: \")\r\n+\r\n+        if opcion == \"4\":\r\n             print(\"Saliendo...\")\r\n             break\r\n-        \r\n+\r\n+        elif opcion in [\"1\", \"2\", \"3\"]:\r\n+            ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n+            ruta_temp = guardar_en_temporal(ruta)\r\n+            if ruta_temp:\r\n+                print(\"Archivo listo para su procesamiento.\")\r\n+            else:\r\n+                print(\"No se pudo procesar el archivo.\")\r\n         else:\r\n             print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n-    main()\r\n+    menu_principal()\r\n"
                },
                {
                    "date": 1756911620217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import os\r\n import shutil\r\n import tempfile\r\n+import json\r\n+import csv\r\n \r\n def guardar_en_temporal(ruta_archivo):\r\n     if not os.path.isfile(ruta_archivo):\r\n         print(\"❌ Error: la ruta no existe o no es un archivo.\")\r\n@@ -13,8 +15,46 @@\n     shutil.copy2(ruta_archivo, ruta_temporal)\r\n     print(f\"✔ Log copiado a carpeta temporal: {ruta_temporal}\")\r\n     return ruta_temporal\r\n \r\n+def procesar_csv(ruta):\r\n+    print(\"\\n=== Procesando CSV ===\")\r\n+    with open(ruta, newline='', encoding=\"utf-8\", errors=\"ignore\") as f:\r\n+        lector = csv.reader(f)\r\n+        filas = list(lector)\r\n+        print(f\"Total de filas: {len(filas)}\")\r\n+        print(\"Primeras 3 filas:\")\r\n+        for fila in filas[:3]:\r\n+            print(fila)\r\n+\r\n+def procesar_json(ruta):\r\n+    print(\"\\n=== Procesando JSON ===\")\r\n+    with open(ruta, encoding=\"utf-8\", errors=\"ignore\") as f:\r\n+        try:\r\n+            datos = json.load(f)\r\n+            if isinstance(datos, list):\r\n+                print(f\"Total de entradas: {len(datos)}\")\r\n+                print(\"Primeras 3 entradas:\")\r\n+                for entrada in datos[:3]:\r\n+                    print(entrada)\r\n+            elif isinstance(datos, dict):\r\n+                print(\"Log cargado como diccionario.\")\r\n+                claves = list(datos.keys())\r\n+                print(\"Claves principales:\", claves[:5])\r\n+            else:\r\n+                print(\"Formato JSON no estándar.\")\r\n+        except json.JSONDecodeError:\r\n+            print(\"❌ Error: el archivo no es un JSON válido.\")\r\n+\r\n+def procesar_syslog(ruta):\r\n+    print(\"\\n=== Procesando SYSLOG ===\")\r\n+    with open(ruta, encoding=\"utf-8\", errors=\"ignore\") as f:\r\n+        lineas = f.readlines()\r\n+        print(f\"Total de líneas: {len(lineas)}\")\r\n+        print(\"Primeras 3 líneas:\")\r\n+        for linea in lineas[:3]:\r\n+            print(linea.strip())\r\n+\r\n def menu_principal():\r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n         print(\"1. Ingestar log CSV\")\r\n@@ -31,9 +71,14 @@\n         elif opcion in [\"1\", \"2\", \"3\"]:\r\n             ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n             ruta_temp = guardar_en_temporal(ruta)\r\n             if ruta_temp:\r\n-                print(\"Archivo listo para su procesamiento.\")\r\n+                if opcion == \"1\":\r\n+                    procesar_csv(ruta_temp)\r\n+                elif opcion == \"2\":\r\n+                    procesar_json(ruta_temp)\r\n+                elif opcion == \"3\":\r\n+                    procesar_syslog(ruta_temp)\r\n             else:\r\n                 print(\"No se pudo procesar el archivo.\")\r\n         else:\r\n             print(\"Opción no válida.\")\r\n"
                },
                {
                    "date": 1756911642116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,16 @@\n import csv\r\n \r\n def guardar_en_temporal(ruta_archivo):\r\n     if not os.path.isfile(ruta_archivo):\r\n-        print(\"❌ Error: la ruta no existe o no es un archivo.\")\r\n+        print(\"Error: la ruta no existe o no es un archivo.\")\r\n         return None\r\n \r\n     nombre_archivo = os.path.basename(ruta_archivo)\r\n     ruta_temporal = os.path.join(tempfile.gettempdir(), nombre_archivo)\r\n \r\n     shutil.copy2(ruta_archivo, ruta_temporal)\r\n-    print(f\"✔ Log copiado a carpeta temporal: {ruta_temporal}\")\r\n+    print(f\"Log copiado a la carpeta temporal: {ruta_temporal}\")\r\n     return ruta_temporal\r\n \r\n def procesar_csv(ruta):\r\n     print(\"\\n=== Procesando CSV ===\")\r\n"
                },
                {
                    "date": 1756911696938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+from parser import guardar_en_temporal, procesar_csv, procesar_json, procesar_syslog\r\n+\r\n+def menu_principal():\r\n+    while True:\r\n+        print(\"\\n=== SOC Automation Toolkit ===\")\r\n+        print(\"1. Ingestar log CSV\")\r\n+        print(\"2. Ingestar log JSON\")\r\n+        print(\"3. Ingestar log SYSLOG (.log)\")\r\n+        print(\"4. Salir\")\r\n+\r\n+        opcion = input(\"Seleccione una opción: \")\r\n+\r\n+        if opcion == \"4\":\r\n+            print(\"Saliendo...\")\r\n+            break\r\n+\r\n+        elif opcion in [\"1\", \"2\", \"3\"]:\r\n+            ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n+            ruta_temp = guardar_en_temporal(ruta)\r\n+            if ruta_temp:\r\n+                if opcion == \"1\":\r\n+                    procesar_csv(ruta_temp)\r\n+                elif opcion == \"2\":\r\n+                    procesar_json(ruta_temp)\r\n+                elif opcion == \"3\":\r\n+                    procesar_syslog(ruta_temp)\r\n+            else:\r\n+                print(\"No se pudo procesar el archivo.\")\r\n+        else:\r\n+            print(\"Opción no válida.\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    menu_principal()\r\n"
                },
                {
                    "date": 1756911854296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,48 @@\n from parser import guardar_en_temporal, procesar_csv, procesar_json, procesar_syslog\r\n \r\n def menu_principal():\r\n+    datos_cargados = None  # Aquí guardaremos el objeto con datos\r\n+\r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n         print(\"1. Ingestar log CSV\")\r\n         print(\"2. Ingestar log JSON\")\r\n         print(\"3. Ingestar log SYSLOG (.log)\")\r\n-        print(\"4. Salir\")\r\n+        print(\"4. Mostrar datos cargados\")\r\n+        print(\"5. Salir\")\r\n \r\n         opcion = input(\"Seleccione una opción: \")\r\n \r\n-        if opcion == \"4\":\r\n+        if opcion == \"5\":\r\n             print(\"Saliendo...\")\r\n             break\r\n \r\n         elif opcion in [\"1\", \"2\", \"3\"]:\r\n             ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n             ruta_temp = guardar_en_temporal(ruta)\r\n             if ruta_temp:\r\n                 if opcion == \"1\":\r\n-                    procesar_csv(ruta_temp)\r\n+                    datos_cargados = procesar_csv(ruta_temp)\r\n                 elif opcion == \"2\":\r\n-                    procesar_json(ruta_temp)\r\n+                    datos_cargados = procesar_json(ruta_temp)\r\n                 elif opcion == \"3\":\r\n-                    procesar_syslog(ruta_temp)\r\n+                    datos_cargados = procesar_syslog(ruta_temp)\r\n             else:\r\n                 print(\"No se pudo procesar el archivo.\")\r\n-        else:\r\n-            print(\"Opción no válida.\")\r\n \r\n-if __name__ == \"__main__\":\r\n-    menu_principal()\r\n-import os\r\n-import shutil\r\n-import tempfile\r\n-import json\r\n-import csv\r\n-\r\n-def guardar_en_temporal(ruta_archivo):\r\n-    if not os.path.isfile(ruta_archivo):\r\n-        print(\"Error: la ruta no existe o no es un archivo.\")\r\n-        return None\r\n-\r\n-    nombre_archivo = os.path.basename(ruta_archivo)\r\n-    ruta_temporal = os.path.join(tempfile.gettempdir(), nombre_archivo)\r\n-\r\n-    shutil.copy2(ruta_archivo, ruta_temporal)\r\n-    print(f\"Log copiado a la carpeta temporal: {ruta_temporal}\")\r\n-    return ruta_temporal\r\n-\r\n-def procesar_csv(ruta):\r\n-    print(\"\\n=== Procesando CSV ===\")\r\n-    with open(ruta, newline='', encoding=\"utf-8\", errors=\"ignore\") as f:\r\n-        lector = csv.reader(f)\r\n-        filas = list(lector)\r\n-        print(f\"Total de filas: {len(filas)}\")\r\n-        print(\"Primeras 3 filas:\")\r\n-        for fila in filas[:3]:\r\n-            print(fila)\r\n-\r\n-def procesar_json(ruta):\r\n-    print(\"\\n=== Procesando JSON ===\")\r\n-    with open(ruta, encoding=\"utf-8\", errors=\"ignore\") as f:\r\n-        try:\r\n-            datos = json.load(f)\r\n-            if isinstance(datos, list):\r\n-                print(f\"Total de entradas: {len(datos)}\")\r\n-                print(\"Primeras 3 entradas:\")\r\n-                for entrada in datos[:3]:\r\n-                    print(entrada)\r\n-            elif isinstance(datos, dict):\r\n-                print(\"Log cargado como diccionario.\")\r\n-                claves = list(datos.keys())\r\n-                print(\"Claves principales:\", claves[:5])\r\n+        elif opcion == \"4\":\r\n+            if datos_cargados is None:\r\n+                print(\"⚠ No hay datos cargados.\")\r\n             else:\r\n-                print(\"Formato JSON no estándar.\")\r\n-        except json.JSONDecodeError:\r\n-            print(\"❌ Error: el archivo no es un JSON válido.\")\r\n-\r\n-def procesar_syslog(ruta):\r\n-    print(\"\\n=== Procesando SYSLOG ===\")\r\n-    with open(ruta, encoding=\"utf-8\", errors=\"ignore\") as f:\r\n-        lineas = f.readlines()\r\n-        print(f\"Total de líneas: {len(lineas)}\")\r\n-        print(\"Primeras 3 líneas:\")\r\n-        for linea in lineas[:3]:\r\n-            print(linea.strip())\r\n-\r\n-def menu_principal():\r\n-    while True:\r\n-        print(\"\\n=== SOC Automation Toolkit ===\")\r\n-        print(\"1. Ingestar log CSV\")\r\n-        print(\"2. Ingestar log JSON\")\r\n-        print(\"3. Ingestar log SYSLOG (.log)\")\r\n-        print(\"4. Salir\")\r\n-\r\n-        opcion = input(\"Seleccione una opción: \")\r\n-\r\n-        if opcion == \"4\":\r\n-            print(\"Saliendo...\")\r\n-            break\r\n-\r\n-        elif opcion in [\"1\", \"2\", \"3\"]:\r\n-            ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n-            ruta_temp = guardar_en_temporal(ruta)\r\n-            if ruta_temp:\r\n-                if opcion == \"1\":\r\n-                    procesar_csv(ruta_temp)\r\n-                elif opcion == \"2\":\r\n-                    procesar_json(ruta_temp)\r\n-                elif opcion == \"3\":\r\n-                    procesar_syslog(ruta_temp)\r\n-            else:\r\n-                print(\"No se pudo procesar el archivo.\")\r\n+                print(\"\\n=== Datos cargados (primeras entradas) ===\")\r\n+                if isinstance(datos_cargados, list):\r\n+                    for fila in datos_cargados[:3]:\r\n+                        print(fila)\r\n+                elif isinstance(datos_cargados, dict):\r\n+                    print({k: datos_cargados[k] for k in list(datos_cargados)[:5]})\r\n+                else:\r\n+                    print(\"Formato desconocido:\", type(datos_cargados))\r\n         else:\r\n             print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n"
                },
                {
                    "date": 1756911915658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n from parser import guardar_en_temporal, procesar_csv, procesar_json, procesar_syslog\r\n \r\n def menu_principal():\r\n-    datos_cargados = None  # Aquí guardaremos el objeto con datos\r\n+    datos_cargados = []  # Siempre será lista de diccionarios\r\n \r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n         print(\"1. Ingestar log CSV\")\r\n         print(\"2. Ingestar log JSON\")\r\n         print(\"3. Ingestar log SYSLOG (.log)\")\r\n-        print(\"4. Mostrar datos cargados\")\r\n+        print(\"4. Mostrar primeros 3 eventos cargados\")\r\n         print(\"5. Salir\")\r\n \r\n         opcion = input(\"Seleccione una opción: \")\r\n \r\n@@ -30,19 +30,14 @@\n             else:\r\n                 print(\"No se pudo procesar el archivo.\")\r\n \r\n         elif opcion == \"4\":\r\n-            if datos_cargados is None:\r\n+            if not datos_cargados:\r\n                 print(\"⚠ No hay datos cargados.\")\r\n             else:\r\n-                print(\"\\n=== Datos cargados (primeras entradas) ===\")\r\n-                if isinstance(datos_cargados, list):\r\n-                    for fila in datos_cargados[:3]:\r\n-                        print(fila)\r\n-                elif isinstance(datos_cargados, dict):\r\n-                    print({k: datos_cargados[k] for k in list(datos_cargados)[:5]})\r\n-                else:\r\n-                    print(\"Formato desconocido:\", type(datos_cargados))\r\n+                print(\"\\n=== Primeros 3 eventos cargados ===\")\r\n+                for evento in datos_cargados[:3]:\r\n+                    print(evento)\r\n         else:\r\n             print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n"
                },
                {
                    "date": 1756912583192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,65 @@\n-from parser import guardar_en_temporal, procesar_csv, procesar_json, procesar_syslog\r\n+from parser import (\r\n+    guardar_en_temporal,\r\n+    procesar_csv,\r\n+    procesar_csv_windows,\r\n+    procesar_json,\r\n+    procesar_syslog,\r\n+    procesar_evtx,\r\n+    EVTX_SUPPORT\r\n+)\r\n \r\n def menu_principal():\r\n-    datos_cargados = []  # Siempre será lista de diccionarios\r\n+    datos_cargados = []  # Lista única de eventos normalizados\r\n \r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n-        print(\"1. Ingestar log CSV\")\r\n-        print(\"2. Ingestar log JSON\")\r\n+        print(\"1. Ingestar log CSV (Linux/otros)\")\r\n+        print(\"2. Ingestar log JSON/NDJSON (Linux/otros)\")\r\n         print(\"3. Ingestar log SYSLOG (.log)\")\r\n-        print(\"4. Mostrar primeros 3 eventos cargados\")\r\n-        print(\"5. Salir\")\r\n+        print(\"4. Ingestar log Windows CSV\")\r\n+        print(\"5. Ingestar log Windows EVTX\")\r\n+        print(\"6. Mostrar primeros 3 eventos cargados\")\r\n+        print(\"7. Salir\")\r\n \r\n         opcion = input(\"Seleccione una opción: \")\r\n \r\n-        if opcion == \"5\":\r\n+        if opcion == \"7\":\r\n             print(\"Saliendo...\")\r\n             break\r\n \r\n-        elif opcion in [\"1\", \"2\", \"3\"]:\r\n+        elif opcion in [\"1\", \"2\", \"3\", \"4\", \"5\"]:\r\n             ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n             ruta_temp = guardar_en_temporal(ruta)\r\n-            if ruta_temp:\r\n-                if opcion == \"1\":\r\n-                    datos_cargados = procesar_csv(ruta_temp)\r\n-                elif opcion == \"2\":\r\n-                    datos_cargados = procesar_json(ruta_temp)\r\n-                elif opcion == \"3\":\r\n-                    datos_cargados = procesar_syslog(ruta_temp)\r\n+            if not ruta_temp:\r\n+                continue\r\n+\r\n+            if opcion == \"1\":\r\n+                datos = procesar_csv(ruta_temp)\r\n+            elif opcion == \"2\":\r\n+                datos = procesar_json(ruta_temp)\r\n+            elif opcion == \"3\":\r\n+                datos = procesar_syslog(ruta_temp)\r\n+            elif opcion == \"4\":\r\n+                datos = procesar_csv_windows(ruta_temp)\r\n+            elif opcion == \"5\":\r\n+                datos = procesar_evtx(ruta_temp)\r\n+\r\n+            if datos:\r\n+                datos_cargados.extend(datos)\r\n+                print(f\"✔ Total eventos cargados: {len(datos_cargados)}\")\r\n             else:\r\n-                print(\"No se pudo procesar el archivo.\")\r\n+                print(\"⚠ No se cargaron eventos de este archivo.\")\r\n \r\n-        elif opcion == \"4\":\r\n+        elif opcion == \"6\":\r\n             if not datos_cargados:\r\n                 print(\"⚠ No hay datos cargados.\")\r\n             else:\r\n-                print(\"\\n=== Primeros 3 eventos cargados ===\")\r\n+                print(\"\\n=== Primeros 3 eventos normalizados ===\")\r\n                 for evento in datos_cargados[:3]:\r\n-                    print(evento)\r\n+                    print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n+                          f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n+                          f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n         else:\r\n             print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n"
                },
                {
                    "date": 1756912701730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     EVTX_SUPPORT\r\n )\r\n \r\n def menu_principal():\r\n-    datos_cargados = []  # Lista única de eventos normalizados\r\n+    datos_cargados = []\r\n \r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n         print(\"1. Ingestar log CSV (Linux/otros)\")\r\n@@ -45,17 +45,17 @@\n                 datos = procesar_evtx(ruta_temp)\r\n \r\n             if datos:\r\n                 datos_cargados.extend(datos)\r\n-                print(f\"✔ Total eventos cargados: {len(datos_cargados)}\")\r\n+                print(f\" Total eventos cargados: {len(datos_cargados)}\")\r\n             else:\r\n-                print(\"⚠ No se cargaron eventos de este archivo.\")\r\n+                print(\"No se cargaron eventos de este archivo. Asegúrese de que el formato es correcto.\")\r\n \r\n         elif opcion == \"6\":\r\n             if not datos_cargados:\r\n-                print(\"⚠ No hay datos cargados.\")\r\n+                print(\"No hay datos cargados.\")\r\n             else:\r\n-                print(\"\\n=== Primeros 3 eventos normalizados ===\")\r\n+                print(\"\\n=== Primeros 3 eventos ===\")\r\n                 for evento in datos_cargados[:3]:\r\n                     print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n                           f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n                           f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n"
                },
                {
                    "date": 1756913319428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,59 +7,77 @@\n     procesar_evtx,\r\n     EVTX_SUPPORT\r\n )\r\n \r\n+def menu_ingesta(datos_cargados):\r\n+    while True:\r\n+        print(\"\\n--- Ingesta de logs ---\")\r\n+        print(\"1. CSV (Linux/otros)\")\r\n+        print(\"2. JSON / NDJSON\")\r\n+        print(\"3. SYSLOG (.log)\")\r\n+        print(\"4. CSV Windows\")\r\n+        print(\"5. EVTX Windows\")\r\n+        print(\"6. Volver al menú principal\")\r\n+\r\n+        opcion = input(\"Seleccione una opción: \")\r\n+\r\n+        if opcion == \"6\":\r\n+            break\r\n+\r\n+        if opcion not in [\"1\",\"2\",\"3\",\"4\",\"5\"]:\r\n+            print(\"Opción no válida.\")\r\n+            continue\r\n+\r\n+        ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n+        ruta_temp = guardar_en_temporal(ruta)\r\n+        if not ruta_temp:\r\n+            continue\r\n+\r\n+        if opcion == \"1\":\r\n+            nuevos_datos = procesar_csv(ruta_temp)\r\n+        elif opcion == \"2\":\r\n+            nuevos_datos = procesar_json(ruta_temp)\r\n+        elif opcion == \"3\":\r\n+            nuevos_datos = procesar_syslog(ruta_temp)\r\n+        elif opcion == \"4\":\r\n+            nuevos_datos = procesar_csv_windows(ruta_temp)\r\n+        elif opcion == \"5\":\r\n+            nuevos_datos = procesar_evtx(ruta_temp)\r\n+\r\n+        if nuevos_datos:\r\n+            datos_cargados.extend(nuevos_datos)\r\n+            print(f\"✔ Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n+        else:\r\n+            print(\"⚠ No se cargaron eventos de este archivo.\")\r\n+\r\n+def mostrar_eventos(datos_cargados):\r\n+    if not datos_cargados:\r\n+        print(\"⚠ No hay datos cargados.\")\r\n+        return\r\n+    print(\"\\n=== Primeros 3 eventos normalizados ===\")\r\n+    for evento in datos_cargados[:3]:\r\n+        print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n+              f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n+              f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n+\r\n def menu_principal():\r\n     datos_cargados = []\r\n \r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n-        print(\"1. Ingestar log CSV (Linux/otros)\")\r\n-        print(\"2. Ingestar log JSON/NDJSON (Linux/otros)\")\r\n-        print(\"3. Ingestar log SYSLOG (.log)\")\r\n-        print(\"4. Ingestar log Windows CSV\")\r\n-        print(\"5. Ingestar log Windows EVTX\")\r\n-        print(\"6. Mostrar primeros 3 eventos cargados\")\r\n-        print(\"7. Salir\")\r\n+        print(\"1. Ingesta de logs\")\r\n+        print(\"2. Mostrar primeros 3 eventos cargados\")\r\n+        print(\"3. Salir\")\r\n \r\n         opcion = input(\"Seleccione una opción: \")\r\n \r\n-        if opcion == \"7\":\r\n+        if opcion == \"1\":\r\n+            menu_ingesta(datos_cargados)\r\n+        elif opcion == \"2\":\r\n+            mostrar_eventos(datos_cargados)\r\n+        elif opcion == \"3\":\r\n             print(\"Saliendo...\")\r\n             break\r\n-\r\n-        elif opcion in [\"1\", \"2\", \"3\", \"4\", \"5\"]:\r\n-            ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n-            ruta_temp = guardar_en_temporal(ruta)\r\n-            if not ruta_temp:\r\n-                continue\r\n-\r\n-            if opcion == \"1\":\r\n-                datos = procesar_csv(ruta_temp)\r\n-            elif opcion == \"2\":\r\n-                datos = procesar_json(ruta_temp)\r\n-            elif opcion == \"3\":\r\n-                datos = procesar_syslog(ruta_temp)\r\n-            elif opcion == \"4\":\r\n-                datos = procesar_csv_windows(ruta_temp)\r\n-            elif opcion == \"5\":\r\n-                datos = procesar_evtx(ruta_temp)\r\n-\r\n-            if datos:\r\n-                datos_cargados.extend(datos)\r\n-                print(f\" Total eventos cargados: {len(datos_cargados)}\")\r\n-            else:\r\n-                print(\"No se cargaron eventos de este archivo. Asegúrese de que el formato es correcto.\")\r\n-\r\n-        elif opcion == \"6\":\r\n-            if not datos_cargados:\r\n-                print(\"No hay datos cargados.\")\r\n-            else:\r\n-                print(\"\\n=== Primeros 3 eventos ===\")\r\n-                for evento in datos_cargados[:3]:\r\n-                    print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n-                          f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n-                          f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n         else:\r\n             print(\"Opción no válida.\")\r\n \r\n if __name__ == \"__main__\":\r\n"
                },
                {
                    "date": 1756913455670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n     procesar_evtx,\r\n     EVTX_SUPPORT\r\n )\r\n \r\n+# Guardamos el tipo de log junto con los eventos para resumen\r\n def menu_ingesta(datos_cargados):\r\n     while True:\r\n         print(\"\\n--- Ingesta de logs ---\")\r\n         print(\"1. CSV (Linux/otros)\")\r\n@@ -33,18 +34,26 @@\n             continue\r\n \r\n         if opcion == \"1\":\r\n             nuevos_datos = procesar_csv(ruta_temp)\r\n+            tipo = \"CSV_Linux\"\r\n         elif opcion == \"2\":\r\n             nuevos_datos = procesar_json(ruta_temp)\r\n+            tipo = \"JSON\"\r\n         elif opcion == \"3\":\r\n             nuevos_datos = procesar_syslog(ruta_temp)\r\n+            tipo = \"SYSLOG\"\r\n         elif opcion == \"4\":\r\n             nuevos_datos = procesar_csv_windows(ruta_temp)\r\n+            tipo = \"CSV_Windows\"\r\n         elif opcion == \"5\":\r\n             nuevos_datos = procesar_evtx(ruta_temp)\r\n+            tipo = \"EVTX_Windows\"\r\n \r\n         if nuevos_datos:\r\n+            # Guardamos el tipo de log junto con cada evento\r\n+            for evento in nuevos_datos:\r\n+                evento[\"_log_type\"] = tipo\r\n             datos_cargados.extend(nuevos_datos)\r\n             print(f\"✔ Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n         else:\r\n             print(\"⚠ No se cargaron eventos de este archivo.\")\r\n@@ -58,24 +67,40 @@\n         print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n               f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n               f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n \r\n+def resumen_eventos(datos_cargados):\r\n+    if not datos_cargados:\r\n+        print(\"⚠ No hay datos cargados.\")\r\n+        return\r\n+    print(\"\\n=== Resumen de eventos cargados ===\")\r\n+    print(f\"Total eventos: {len(datos_cargados)}\")\r\n+    tipos = {}\r\n+    for evento in datos_cargados:\r\n+        tipo = evento.get(\"_log_type\", \"Desconocido\")\r\n+        tipos[tipo] = tipos.get(tipo, 0) + 1\r\n+    for tipo, cantidad in tipos.items():\r\n+        print(f\"{tipo}: {cantidad} eventos\")\r\n+\r\n def menu_principal():\r\n     datos_cargados = []\r\n \r\n     while True:\r\n         print(\"\\n=== SOC Automation Toolkit ===\")\r\n         print(\"1. Ingesta de logs\")\r\n         print(\"2. Mostrar primeros 3 eventos cargados\")\r\n-        print(\"3. Salir\")\r\n+        print(\"3. Resumen de eventos cargados\")\r\n+        print(\"4. Salir\")\r\n \r\n         opcion = input(\"Seleccione una opción: \")\r\n \r\n         if opcion == \"1\":\r\n             menu_ingesta(datos_cargados)\r\n         elif opcion == \"2\":\r\n             mostrar_eventos(datos_cargados)\r\n         elif opcion == \"3\":\r\n+            resumen_eventos(datos_cargados)\r\n+        elif opcion == \"4\":\r\n             print(\"Saliendo...\")\r\n             break\r\n         else:\r\n             print(\"Opción no válida.\")\r\n"
                },
                {
                    "date": 1756913544547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n     procesar_evtx,\r\n     EVTX_SUPPORT\r\n )\r\n \r\n-# Guardamos el tipo de log junto con los eventos para resumen\r\n def menu_ingesta(datos_cargados):\r\n     while True:\r\n         print(\"\\n--- Ingesta de logs ---\")\r\n         print(\"1. CSV (Linux/otros)\")\r\n"
                },
                {
                    "date": 1756913561989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n                 evento[\"_log_type\"] = tipo\r\n             datos_cargados.extend(nuevos_datos)\r\n             print(f\"✔ Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n         else:\r\n-            print(\"⚠ No se cargaron eventos de este archivo.\")\r\n+            print(\"No se han cargado eventos de este archivo.\")\r\n \r\n def mostrar_eventos(datos_cargados):\r\n     if not datos_cargados:\r\n         print(\"⚠ No hay datos cargados.\")\r\n"
                },
                {
                    "date": 1756913582033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n             # Guardamos el tipo de log junto con cada evento\r\n             for evento in nuevos_datos:\r\n                 evento[\"_log_type\"] = tipo\r\n             datos_cargados.extend(nuevos_datos)\r\n-            print(f\"✔ Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n+            print(f\"Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n         else:\r\n             print(\"No se han cargado eventos de este archivo.\")\r\n \r\n def mostrar_eventos(datos_cargados):\r\n"
                },
                {
                    "date": 1756913596121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n             nuevos_datos = procesar_evtx(ruta_temp)\r\n             tipo = \"EVTX_Windows\"\r\n \r\n         if nuevos_datos:\r\n-            # Guardamos el tipo de log junto con cada evento\r\n             for evento in nuevos_datos:\r\n                 evento[\"_log_type\"] = tipo\r\n             datos_cargados.extend(nuevos_datos)\r\n             print(f\"Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n"
                },
                {
                    "date": 1756913614116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n             print(\"No se han cargado eventos de este archivo.\")\r\n \r\n def mostrar_eventos(datos_cargados):\r\n     if not datos_cargados:\r\n-        print(\"⚠ No hay datos cargados.\")\r\n+        print(\"No hay datos cargados.\")\r\n         return\r\n     print(\"\\n=== Primeros 3 eventos normalizados ===\")\r\n     for evento in datos_cargados[:3]:\r\n         print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n@@ -67,9 +67,9 @@\n               f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n \r\n def resumen_eventos(datos_cargados):\r\n     if not datos_cargados:\r\n-        print(\"⚠ No hay datos cargados.\")\r\n+        print(\"No hay datos cargados.\")\r\n         return\r\n     print(\"\\n=== Resumen de eventos cargados ===\")\r\n     print(f\"Total eventos: {len(datos_cargados)}\")\r\n     tipos = {}\r\n"
                },
                {
                    "date": 1756913926731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+\"\"\"\r\n+SOC Automation Toolkit - Módulo principal\r\n+\r\n+Este módulo proporciona una interfaz de línea de comandos para la ingesta, visualización y resumen de logs\r\n+de diferentes formatos (CSV, JSON, SYSLOG, EVTX) en un flujo de trabajo de análisis SOC.\r\n+Permite cargar eventos desde archivos, normalizarlos y mostrar información relevante para el usuario.\r\n+\r\n+Funciones principales:\r\n+- menu_principal: Menú principal de la aplicación.\r\n+- menu_ingesta: Menú para seleccionar el tipo de archivo de log a cargar.\r\n+- mostrar_eventos: Muestra los primeros eventos cargados.\r\n+- resumen_eventos: Muestra un resumen de los eventos cargados.\r\n+\"\"\"\r\n+\r\n+from parser import (\r\n+    guardar_en_temporal,\r\n+    procesar_csv,\r\n+    procesar_csv_windows,\r\n+    procesar_json,\r\n+    procesar_syslog,\r\n+    procesar_evtx,\r\n+    EVTX_SUPPORT\r\n+)\r\n+\r\n+def menu_ingesta(datos_cargados):\r\n+    \"\"\"\r\n+    Muestra el menú de ingesta de logs y permite al usuario seleccionar el tipo de archivo a cargar.\r\n+    Procesa el archivo seleccionado y añade los eventos normalizados a la lista de datos cargados.\r\n+\r\n+    Args:\r\n+        datos_cargados (list): Lista donde se almacenan los eventos cargados.\r\n+    \"\"\"\r\n+    while True:\r\n+        print(\"\\n--- Ingesta de logs ---\")\r\n+        print(\"1. CSV (Linux/otros)\")\r\n+        print(\"2. JSON / NDJSON\")\r\n+        print(\"3. SYSLOG (.log)\")\r\n+        print(\"4. CSV Windows\")\r\n+        print(\"5. EVTX Windows\")\r\n+        print(\"6. Volver al menú principal\")\r\n+\r\n+        opcion = input(\"Seleccione una opción: \")\r\n+\r\n+        if opcion == \"6\":\r\n+            break\r\n+\r\n+        if opcion not in [\"1\",\"2\",\"3\",\"4\",\"5\"]:\r\n+            print(\"Opción no válida.\")\r\n+            continue\r\n+\r\n+        ruta = input(\"Introduzca la ruta absoluta del archivo: \")\r\n+        ruta_temp = guardar_en_temporal(ruta)\r\n+        if not ruta_temp:\r\n+            continue\r\n+\r\n+        if opcion == \"1\":\r\n+            nuevos_datos = procesar_csv(ruta_temp)\r\n+            tipo = \"CSV_Linux\"\r\n+        elif opcion == \"2\":\r\n+            nuevos_datos = procesar_json(ruta_temp)\r\n+            tipo = \"JSON\"\r\n+        elif opcion == \"3\":\r\n+            nuevos_datos = procesar_syslog(ruta_temp)\r\n+            tipo = \"SYSLOG\"\r\n+        elif opcion == \"4\":\r\n+            nuevos_datos = procesar_csv_windows(ruta_temp)\r\n+            tipo = \"CSV_Windows\"\r\n+        elif opcion == \"5\":\r\n+            nuevos_datos = procesar_evtx(ruta_temp)\r\n+            tipo = \"EVTX_Windows\"\r\n+\r\n+        if nuevos_datos:\r\n+            for evento in nuevos_datos:\r\n+                evento[\"_log_type\"] = tipo\r\n+            datos_cargados.extend(nuevos_datos)\r\n+            print(f\"Total eventos cargados hasta ahora: {len(datos_cargados)}\")\r\n+        else:\r\n+            print(\"No se han cargado eventos de este archivo.\")\r\n+\r\n+def mostrar_eventos(datos_cargados):\r\n+    \"\"\"\r\n+    Muestra los primeros 3 eventos normalizados de los datos cargados.\r\n+\r\n+    Args:\r\n+        datos_cargados (list): Lista de eventos cargados.\r\n+    \"\"\"\r\n+    if not datos_cargados:\r\n+        print(\"No hay datos cargados.\")\r\n+        return\r\n+    print(\"\\n=== Primeros 3 eventos normalizados ===\")\r\n+    for evento in datos_cargados[:3]:\r\n+        print(f\"timestamp: {evento['timestamp']}, host: {evento['host']}, \"\r\n+              f\"process: {evento['process']}, severity: {evento['severity']}, \"\r\n+              f\"message: {evento['message'][:80]}{'...' if len(evento['message'])>80 else ''}\")\r\n+\r\n+def resumen_eventos(datos_cargados):\r\n+    \"\"\"\r\n+    Muestra un resumen de la cantidad total de eventos cargados y su distribución por tipo de log.\r\n+\r\n+    Args:\r\n+        datos_cargados (list): Lista de eventos cargados.\r\n+    \"\"\"\r\n+    if not datos_cargados:\r\n+        print(\"No hay datos cargados.\")\r\n+        return\r\n+    print(\"\\n=== Resumen de eventos cargados ===\")\r\n+    print(f\"Total eventos: {len(datos_cargados)}\")\r\n+    tipos = {}\r\n+    for evento in datos_cargados:\r\n+        tipo = evento.get(\"_log_type\", \"Desconocido\")\r\n+        tipos[tipo] = tipos.get(tipo, 0) + 1\r\n+    for tipo, cantidad in tipos.items():\r\n+        print(f\"{tipo}: {cantidad} eventos\")\r\n+\r\n+def menu_principal():\r\n+    \"\"\"\r\n+    Muestra el menú principal de la aplicación y gestiona la navegación entre las diferentes opciones.\r\n+    \"\"\"\r\n+    datos_cargados = []\r\n+\r\n+    while True:\r\n+        print(\"\\n=== SOC Automation Toolkit ===\")\r\n+        print(\"1. Ingesta de logs\")\r\n+        print(\"2. Mostrar primeros 3 eventos cargados\")\r\n+        print(\"3. Resumen de eventos cargados\")\r\n+        print(\"4. Salir\")\r\n+\r\n+        opcion = input(\"Seleccione una opción: \")\r\n+\r\n+        if opcion == \"1\":\r\n+            menu_ingesta(datos_cargados)\r\n+        elif opcion == \"2\":\r\n+            mostrar_eventos(datos_cargados)\r\n+        elif opcion == \"3\":\r\n+            resumen_eventos(datos_cargados)\r\n+        elif opcion == \"4\":\r\n+            print(\"Saliendo...\")\r\n+            break\r\n+        else:\r\n+            print(\"Opción no válida.\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    menu_principal()\r\n"
                }
            ],
            "date": 1756831292830,
            "name": "Commit-0",
            "content": "def main_menu():\r\n    while True:\r\n        print(\"\\nSOC Automation Toolkit\")\r\n        print(\"=====================\")\r\n        print(\"1) Ingestar logs\")\r\n        print(\"2) Detectar patrones sospechosos\")\r\n        print(\"3) Verificar IOCs\")\r\n        print(\"4) Generar reportes\")\r\n        print(\"5) Ejecutar respuesta automática\")\r\n        print(\"0) Salir\")\r\n        choice = input(\"Elija una opción: \")\r\n\r\n        if choice == \"1\":\r\n            print(\"Opción 1 seleccionada: Ingestar logs\")\r\n            # Llamar función parser\r\n        elif choice == \"2\":\r\n            print(\"Opción 2 seleccionada: Detectar patrones\")\r\n        elif choice == \"3\":\r\n            print(\"Opción 3 seleccionada: Verificar IOCs\")\r\n        elif choice == \"4\":\r\n            print(\"Opción 4 seleccionada: Generar reportes\")\r\n        elif choice == \"5\":\r\n            print(\"Opción 5 seleccionada: Ejecutar respuesta\")\r\n        elif choice == \"0\":\r\n            print(\"Saliendo...\")\r\n            break\r\n        else:\r\n            print(\"Opción no válida, intente de nuevo.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main_menu()\r\n"
        }
    ]
}